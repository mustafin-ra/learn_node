Команды терминала
ls вывести содержимое каталога
pwd вывести каталог в котором находимся
cd ./ и нажать tab 
clear очистка терминала
npm init - инициализация проекта
{
    package name: запрашивается имя проекта, по умолчанию оно совпадает с именем каталога в котором находимся
    entry point: точка входа, по умолчанию index.js
}
после инициализации появился контекст, появился package.json
{
  "name": "learn_node",
  "version": "1.0.0",
  "description": "my project 00",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"//по умолчанию "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
теперь если мы будем ставить модули то package.json прописываются зависимости
теперь мы можем написать npm start (если полностью то npm run start)

модули можно устанавливать локально и глобально
npm install ascii-art   это локальная установка, это означает что в проекте если нет то создастся каталог node_modules и в этот
каталог будет установлен пакет ascii-art и все пакеты которые зависят от него
npm install -g ascii-art это глобальная установка, то этот пакет будет установлен в каталог node - каталог node_modules и он будет 
глобально доступен в нашей системе, но так делать не правильно
после установки в package.json добавляется секция "dependencies(зависимости)"{"ascii-art":"^2.8.5"} которая в себе хранит этот модуль
теперь представи что нам нужно сохранить наш проект на гит репозиторий и вопрос нужно ли нам все эти модули туда тащить?
как правило это признак плахого тона когда мы берем и все эти модули добавляем в гит репозиторий и для этого созданы зависимости
 как правило node_modules исключается из контроля версий. И т.к. ascii-art у нас прописался в dependencies , то вслучае если каталог
 node_modules будет удален или проект был перемещен без node_modules, то чтобы снова подгрузить установленные пакеты нужно просто
 выполнить команду npm install т.е. в каталоге где уже создан package.json и описан dependencies мы просто выполняем команду npm install
 и все эти зависимости к нам устанавливаются обратно в каталог node_modules

 есть модули которые нам нужны только на этапе разработки, т.е. в продакшн он нам не нужен , в этом случае dependencies его помещать
 не нужно т.е. его установка должна быть с ключом -D 
 npm install -D nodemon  , этот пакет будет также установлен в node_modules , но его зависимость попадет в devDependencies
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
в принципе мы можем в package.json перенести "nodemon": "^3.1.9" из "devDependencies" в "dependencies" 

теперь как наш проект закинуть на гитхаб, создаем новый проект с названием нашей папки learn_node , меняем название локального каталога к примеру на learn_node__, затем открываем
пустой проект и в терминале пишем в терминале пишем git clone https://github.com/mustafin-ra/learn_node.git после чего будет создан локальный
каталог learn_node , в нем будет каталог .git - это БД системы контроля версий который у нас локально на компьютере установлен и когда мы манипулируем
коммитами и другими инструментариями языка то вся магия хождения по веткам по версиям, она хранится внутри
Теперь переносим все из нашего локального рабочего каталого learn_node__ в новый каталог learn_node
В терминале пишем git status и смотрим изменения
в vscode появляется Source Control в котором можно производить манипуляции через интерфейс
напротив файлов могут быть разные обозначения, к примеру 
'U' означает untracked т.е. git не следит за этими файлами
'M' был модифицирован
но т.к. node_modules на в git - е не нужен то мы создаем файл .gitignore и в файле прописываем что игнорировать будем node_modules

если мы не настраивали через SSH, то чтобы измежать каждый раз вводить логин и пароль, мы можеи в папке .git именит файл config,
предварительно создаем в гитхабе токе (Developer Settings - Tokens (classic)) и затем меняем строку url = https://github.com/mustafin-ra/learn_node.git 
на строку url = https://токен@github.com/mustafin-ra/learn_node.git . После этого не нужно будет постоянно вводить логин и пароль от гитхаба
чтобы в гите было видно кто вносит изменения забиваем в терминале 
git config user.email "mustafin.mra@gmail.com"
git config user.name "Renat"
после этих двух команд в файле config добавится
[user]
	email = mustafin.mra@gmail.com
	name = Renat
  этот файл config можно из одного проекта копировать в другой

  git log - позволяет посмотреть журнал коммитов
  git status - говорит что поменялось
  git add . - добавляет факт изменения всех файлов
  git /project_00_ascii_art/index.js - добавить факт изменения конкретного файла
  чем чаще мы делаем коммиты тем лучше, т.к. всегда можно вернуться к тому коммиту в котором все работалоdif
  git diff - показывает какие изменения были внесены
